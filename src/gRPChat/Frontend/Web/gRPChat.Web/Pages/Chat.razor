@page "/"
@using Blazored.LocalStorage;
@using Grpc.Core;
@using gRPChat.Protos;

@inject NavigationManager _navigationManager
@inject IStringLocalizer<Chat> _loc
@inject ILocalStorageService _storage
@inject ChatRoom.ChatRoomClient _chatRoomClient


<div style="height: 80vh; width: 50vw;">

    <Grid RowDefinitions="* auto">

        <GridChild Row="1"
                   VerticalAlignment="VerticalAlignment.Bottom" 
                   style="overflow-y: auto; max-height: 100%">
            <ChatMessagesView Messages="_messages" />
        </GridChild>

        <GridChild Row="2">
            <RadzenTextArea Placeholder="@_loc["TextAreaPlaceHolder"]"
                            @bind-Value="_message" 
                            class="w-100" />
            <RadzenButton Click="SendMessageAsync" Text="@_loc["SendButtonText"]" ButtonStyle="ButtonStyle.Primary" />
        </GridChild>

    </Grid> 

</div>


@code
{
    private List<string> _messages = new();

    private string _message;

    private readonly CancellationTokenSource _cancellationToken = new();

    protected override async Task OnInitializedAsync()
    {
        _navigationManager.LocationChanged += NavigationManagerOnLocationChanged;

        var serverStream = _chatRoomClient.JoinChat(new ChatRequest(), cancellationToken: _cancellationToken.Token);
        var stream = serverStream.ResponseStream;

        try
        {
            await foreach (var message in stream.ReadAllAsync(_cancellationToken.Token))
            {
                _messages.Add(message.Message);
                this.StateHasChanged();
            }
        }
        catch (Exception e)
        {

            Console.WriteLine(e.Message);
        }
        finally
        {
            serverStream.Dispose();
        }

    }

    private void NavigationManagerOnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        Dispose();
    }

    public void Dispose()
    {
        _cancellationToken.Cancel();
    }

    private async Task SendMessageAsync()
    {
        if (string.IsNullOrEmpty(_message))
            return;

        await _chatRoomClient.SendAsync(new ChatMessage
        {
            Message = _message
        });

        _message = "";
    }
}
